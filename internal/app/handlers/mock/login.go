// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/handlers/login/login.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/FischukSergey/go-gothermart.git/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockLoginer is a mock of Loginer interface.
type MockLoginer struct {
	ctrl     *gomock.Controller
	recorder *MockLoginerMockRecorder
}

// MockLoginerMockRecorder is the mock recorder for MockLoginer.
type MockLoginerMockRecorder struct {
	mock *MockLoginer
}

// NewMockLoginer creates a new mock instance.
func NewMockLoginer(ctrl *gomock.Controller) *MockLoginer {
	mock := &MockLoginer{ctrl: ctrl}
	mock.recorder = &MockLoginerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginer) EXPECT() *MockLoginerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockLoginer) Login(ctx context.Context, email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockLoginerMockRecorder) Login(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLoginer)(nil).Login), ctx, email)
}
