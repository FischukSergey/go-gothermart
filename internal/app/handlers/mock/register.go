// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/handlers/register/register.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/FischukSergey/go-gothermart.git/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRegister is a mock of UserRegister interface.
type MockUserRegister struct {
	ctrl     *gomock.Controller
	recorder *MockUserRegisterMockRecorder
}

// MockUserRegisterMockRecorder is the mock recorder for MockUserRegister.
type MockUserRegisterMockRecorder struct {
	mock *MockUserRegister
}

// NewMockUserRegister creates a new mock instance.
func NewMockUserRegister(ctrl *gomock.Controller) *MockUserRegister {
	mock := &MockUserRegister{ctrl: ctrl}
	mock.recorder = &MockUserRegisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRegister) EXPECT() *MockUserRegisterMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockUserRegister) Register(ctx context.Context, u *models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, u)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserRegisterMockRecorder) Register(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserRegister)(nil).Register), ctx, u)
}
