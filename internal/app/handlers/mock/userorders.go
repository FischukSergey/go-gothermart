// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/handlers/userorders/userorders.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/FischukSergey/go-gothermart.git/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserOrdersGetter is a mock of UserOrdersGetter interface.
type MockUserOrdersGetter struct {
	ctrl     *gomock.Controller
	recorder *MockUserOrdersGetterMockRecorder
}

// MockUserOrdersGetterMockRecorder is the mock recorder for MockUserOrdersGetter.
type MockUserOrdersGetterMockRecorder struct {
	mock *MockUserOrdersGetter
}

// NewMockUserOrdersGetter creates a new mock instance.
func NewMockUserOrdersGetter(ctrl *gomock.Controller) *MockUserOrdersGetter {
	mock := &MockUserOrdersGetter{ctrl: ctrl}
	mock.recorder = &MockUserOrdersGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserOrdersGetter) EXPECT() *MockUserOrdersGetterMockRecorder {
	return m.recorder
}

// GetUserOrders mocks base method.
func (m *MockUserOrdersGetter) GetUserOrders(ctx context.Context, id int) ([]models.GetUserOrders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", ctx, id)
	ret0, _ := ret[0].([]models.GetUserOrders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockUserOrdersGetterMockRecorder) GetUserOrders(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockUserOrdersGetter)(nil).GetUserOrders), ctx, id)
}
