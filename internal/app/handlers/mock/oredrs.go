// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/handlers/orders/orders.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/FischukSergey/go-gothermart.git/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderSaver is a mock of OrderSaver interface.
type MockOrderSaver struct {
	ctrl     *gomock.Controller
	recorder *MockOrderSaverMockRecorder
}

// MockOrderSaverMockRecorder is the mock recorder for MockOrderSaver.
type MockOrderSaverMockRecorder struct {
	mock *MockOrderSaver
}

// NewMockOrderSaver creates a new mock instance.
func NewMockOrderSaver(ctrl *gomock.Controller) *MockOrderSaver {
	mock := &MockOrderSaver{ctrl: ctrl}
	mock.recorder = &MockOrderSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderSaver) EXPECT() *MockOrderSaverMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderSaver) CreateOrder(ctx context.Context, order models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderSaverMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderSaver)(nil).CreateOrder), ctx, order)
}
